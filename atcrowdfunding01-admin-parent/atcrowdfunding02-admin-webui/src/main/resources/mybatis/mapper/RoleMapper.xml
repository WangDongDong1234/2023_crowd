<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.crowd.mapper.RoleMapper">
  <resultMap id="BaseResultMap" type="com.atguigu.crowd.entity.RoleEntity">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="CHAR" property="name" />
  </resultMap>
  <sql id="Base_Column_List">
    id, name
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_role
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_role
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.atguigu.crowd.entity.RoleEntity">
    insert into t_role (id, name)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.atguigu.crowd.entity.RoleEntity">
    insert into t_role
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.atguigu.crowd.entity.RoleEntity">
    update t_role
    <set>
      <if test="name != null">
        name = #{name,jdbcType=CHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.atguigu.crowd.entity.RoleEntity">
    update t_role
    set name = #{name,jdbcType=CHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="selectRoleByKeyword" resultMap="BaseResultMap">
		select id, name from t_role
		where name like concat("%",#{keyword},"%")
 </select>

  <delete id="removeRole">
    delete  from t_role
    <where>
        1=1
        <if test="roleIdList != null">
          and id in
          <foreach collection="roleIdList" item="item" index="index" open="(" separator="," close=")">
            #{item}
          </foreach>
        </if>
    </where>
  </delete>

  <select id="selectAssignedRole" resultMap="BaseResultMap">
    select id,name from t_role where id in (select role_id from inner_admin_role where
    admin_id=#{adminId})
  </select>

  <select id="selectUnAssignedRole" resultMap="BaseResultMap">
    select id,name from t_role where id not in (select role_id from inner_admin_role where
    admin_id=#{adminId})
  </select>
</mapper>